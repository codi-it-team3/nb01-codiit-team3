generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String
  email              String              @unique
  password           String
  refreshToken       String?
  type               UserType            @default(BUYER)
  points             Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  grade              Grade               @relation(fields: [gradeId], references: [id])
  gradeId            String              @default("grade_green")
  image              String?             @default("https://sprint-be-project.s3.ap-northeast-2.amazonaws.com/codiit/1749477485230-user_default.png")
  alarms             Alarm[]
  cart               Cart?
  favoriteStores     FavoriteStore[]
  inquiries          Inquiry[]
  orders             Order[]
  reply              Reply[]
  reviews            Review[]
  SalesLog           SalesLog[]
  stores             Store?
  recentProductViews RecentProductView[]
}

model Grade {
  name      GradeName
  id        String    @id @default(cuid())
  rate      Int
  minAmount Int
  users     User[]
}

model Store {
  id                String              @id @default(cuid())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String              @unique
  address           String
  detailAddress     String
  phoneNumber       String
  content           String
  image             String              @default("")
  DailyStoreSales   DailyStoreSales[]
  WeeklyStoreSales  WeeklyStoreSales[]
  MonthlyStoreSales MonthlyStoreSales[]
  YearlyStoreSales  YearlyStoreSales[]
  favoriteBy        FavoriteStore[]
  products          Product[]
  SalesLog          SalesLog[]
}

model FavoriteStore {
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@id([storeId, userId])
}

model Product {
  id                 String              @id @default(cuid())
  name               String
  image              String              @default("")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  reviewsRating      Int                 @default(0)
  store              Store               @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId            String
  price              Int                 @default(0)
  content            String?
  discountRate       Int                 @default(0)
  discountStartTime  DateTime?
  discountEndTime    DateTime?
  reviews            Review[]
  inquiries          Inquiry[]
  category           Category            @relation("ProductCategory", fields: [categoryId], references: [id])
  categoryId         String
  stocks             Stock[]
  cartItems          CartItem[]
  orderItems         OrderItem[]
  SalesLog           SalesLog[]
  recentProductViews RecentProductView[]
  viewCount          Int                 @default(0)
}

model Category {
  name    CategoryName
  id      String       @id @default(cuid())
  Product Product[]    @relation("ProductCategory")
}

model Stock {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  size      Size    @relation(fields: [sizeId], references: [id])
  sizeId    String
  quantity  Int     @default(0)

  @@unique([productId, sizeId])
}

model Size {
  size      Json
  name      String      @unique
  id        String      @id @default(cuid())
  CartItem  CartItem[]
  OrderItem OrderItem[]
  Stock     Stock[]
}

model Inquiry {
  id        String       @id @default(cuid())
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  title     String
  content   String
  status    AnswerStatus @default(WaitingAnswer)
  isSecret  Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  reply     Reply?
}

model Reply {
  id        String   @id @default(cuid())
  inquiry   Inquiry  @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  inquiryId String   @unique
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  rating      Int       @default(0)
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId String    @unique
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId   String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  size      Size     @relation(fields: [sizeId], references: [id])
  sizeId    String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, sizeId])
}

model Order {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  name          String
  phoneNumber   String
  address       String
  subtotal      Int
  totalQuantity Int         @default(1)
  usePoint      Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderItems    OrderItem[]
  payments      Payment?
}

model OrderItem {
  id         String  @id @default(cuid())
  price      Int
  quantity   Int     @default(1)
  product    Product @relation(fields: [productId], references: [id])
  productId  String
  size       Size    @relation(fields: [sizeId], references: [id])
  sizeId     String
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  isReviewed Boolean @default(false)
  Review     Review?
}

model Payment {
  id        String        @id @default(cuid())
  price     Int
  status    PaymentStatus @default(WaitingPayment)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String        @unique
}

model Alarm {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  content   String
  isChecked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SalesLog {
  id        String   @id @default(cuid())
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
  buyer     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  store     Store?   @relation(fields: [storeId], references: [id], onDelete: SetNull)
  storeId   String?
  price     Int
  quantity  Int      @default(1)
  soldAt    DateTime @default(now())
}

model DailyStoreSales {
  id          String   @id @default(cuid())
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String
  date        DateTime
  totalSales  BigInt   @db.BigInt
  totalOrders Int
  createdAt   DateTime @default(now())

  @@unique([storeId, date])
}

model WeeklyStoreSales {
  id          String   @id @default(cuid())
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String
  week        Int
  year        Int
  totalSales  BigInt   @db.BigInt
  totalOrders Int
  createdAt   DateTime @default(now())

  @@unique([storeId, year, week])
}

model MonthlyStoreSales {
  id          String   @id @default(cuid())
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String
  month       Int
  year        Int
  totalSales  BigInt   @db.BigInt
  totalOrders Int
  createdAt   DateTime @default(now())

  @@unique([storeId, year, month])
}

model YearlyStoreSales {
  id          String   @id @default(cuid())
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String
  year        Int
  totalSales  BigInt   @db.BigInt
  totalOrders Int
  createdAt   DateTime @default(now())

  @@unique([storeId, year])
}

model RecentProductView {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  viewedAt  DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId, viewedAt])
}

enum UserType {
  BUYER
  SELLER
}

enum AnswerStatus {
  WaitingAnswer
  CompletedAnswer
}

enum PaymentStatus {
  WaitingPayment
  CompletedPayment
  CancelledPayment
}

enum GradeName {
  VIP
  Black
  Red
  Orange
  Green
}

enum CategoryName {
  TOP
  BOTTOM
  DRESS
  OUTER
  SKIRT
  SHOES
  ACC
}
